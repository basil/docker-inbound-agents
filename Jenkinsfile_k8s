pipeline {
  agent none

  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder logRotator(numToKeepStr: '10')
  }

  triggers {
    cron('@daily')
  }

  stages {
    stage('Build and Test Linux Images') {
      when {
        expression { !infra.isTrusted() }
      }

      matrix {
        agent {
          kubernetes {
            inheritFrom 'jnlp-linux'
            defaultContainer 'builder'
            yaml '''
apiVersion: "v1"
kind: "Pod"
metadata:
  labels:
    jenkins: "agent"
    job/kind: "docker-image-build"
  annotations:
    container.apparmor.security.beta.kubernetes.io/builder: unconfined
    container.seccomp.security.alpha.kubernetes.io/builder: unconfined
spec:
  restartPolicy: "Never"
  containers:
    - name: builder
      image: jenkinsciinfra/builder:latest
      command:
      - cat
      tty: true
      resources:
      limits:
        memory: "512Mi"
        cpu: "500m"
      requests:
        memory: "512Mi"
        cpu: "500m"
            '''
          }
        }

        axes {
          axis {
            name 'IMAGE_DIR'
            values 'terraform', 'docker', 'python/python3', 'python/python2', 'golang', 'maven/jdk11', 'maven/jdk8', 'powershell', 'coreruntime/31', 'coreruntime/30', 'coreruntime/22', 'coresdk/31', 'node', 'ruby'
          }
        }
        stages {
          stage('Prepare') {
            environment {
              DOCKER_REGISTRY = credentials('jenkins-dockerhub')
            }
            steps {
              sh 'echo "${DOCKER_REGISTRY_PSW}" | img login -u "${DOCKER_REGISTRY_USR}" --password-stdin'
            }
          }
          stage("Lint") {
            steps {
              dir(IMAGE_DIR) {
                sh 'make -C ${WORKSPACE}/ lint'
              }
            }
            post {
              always {
                recordIssues(
                  enabledForFailure: true,
                  aggregatingResults: false,
                  tool: hadoLint(id: "hadolint-${IMAGE_DIR.replaceAll('/','-')}", pattern: "${IMAGE_DIR}/hadolint.json")
                )
              }
            }
          }
          stage("Build") {
            steps {
              dir(IMAGE_DIR) {
                sh 'make -C ${WORKSPACE}/ build'
              }
            }
          }
          stage("Common Tests") {
            when {
              expression { fileExists "${WORKSPACE}/cst.yml" }
            }
            environment {
              TEST_HARNESS = "${WORKSPACE}/cst.yml"
            }
            steps {
              dir(IMAGE_DIR) {
                sh 'make -C ${WORKSPACE}/ test'
              }
            }
          }
          stage("Specific Tests") {
             when {
              expression { fileExists "${IMAGE_DIR}/cst.yml" }
            }
            steps {
              dir(IMAGE_DIR) {
                sh 'make -C ${WORKSPACE}/ test'
              }
            }
          }
          stage("Deploy") {
            when {
              branch 'main'
            }
            steps {
              sh "make deploy"
            } // steps
          }
        }
        post {
          cleanup {
            sh 'img logout'
          }
        }
      }
    }
  } // stages
}
